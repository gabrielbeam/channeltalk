// Autogenerated from Pigeon (v10.1.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "LeanplumMessage.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}
static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@interface BridgeLeanplumUserAttributes ()
+ (BridgeLeanplumUserAttributes *)fromList:(NSArray *)list;
+ (nullable BridgeLeanplumUserAttributes *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@implementation BridgeLeanplumUserAttributes
+ (instancetype)makeWithEmail:(nullable NSString *)email
    userId:(nullable NSString *)userId {
  BridgeLeanplumUserAttributes* pigeonResult = [[BridgeLeanplumUserAttributes alloc] init];
  pigeonResult.email = email;
  pigeonResult.userId = userId;
  return pigeonResult;
}
+ (BridgeLeanplumUserAttributes *)fromList:(NSArray *)list {
  BridgeLeanplumUserAttributes *pigeonResult = [[BridgeLeanplumUserAttributes alloc] init];
  pigeonResult.email = GetNullableObjectAtIndex(list, 0);
  pigeonResult.userId = GetNullableObjectAtIndex(list, 1);
  return pigeonResult;
}
+ (nullable BridgeLeanplumUserAttributes *)nullableFromList:(NSArray *)list {
  return (list) ? [BridgeLeanplumUserAttributes fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.email ?: [NSNull null]),
    (self.userId ?: [NSNull null]),
  ];
}
@end

@interface BridgeLeanplumNativeMethodCodecReader : FlutterStandardReader
@end
@implementation BridgeLeanplumNativeMethodCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [BridgeLeanplumUserAttributes fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface BridgeLeanplumNativeMethodCodecWriter : FlutterStandardWriter
@end
@implementation BridgeLeanplumNativeMethodCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[BridgeLeanplumUserAttributes class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface BridgeLeanplumNativeMethodCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation BridgeLeanplumNativeMethodCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[BridgeLeanplumNativeMethodCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[BridgeLeanplumNativeMethodCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *BridgeLeanplumNativeMethodGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    BridgeLeanplumNativeMethodCodecReaderWriter *readerWriter = [[BridgeLeanplumNativeMethodCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void BridgeLeanplumNativeMethodSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<BridgeLeanplumNativeMethod> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.channeltalk.BridgeLeanplumNativeMethod.init"
        binaryMessenger:binaryMessenger
        codec:BridgeLeanplumNativeMethodGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(initAppId:appKey:error:)], @"BridgeLeanplumNativeMethod api (%@) doesn't respond to @selector(initAppId:appKey:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_appId = GetNullableObjectAtIndex(args, 0);
        NSString *arg_appKey = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api initAppId:arg_appId appKey:arg_appKey error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.channeltalk.BridgeLeanplumNativeMethod.setUserAttributes"
        binaryMessenger:binaryMessenger
        codec:BridgeLeanplumNativeMethodGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setUserAttributesAttributes:error:)], @"BridgeLeanplumNativeMethod api (%@) doesn't respond to @selector(setUserAttributesAttributes:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        BridgeLeanplumUserAttributes *arg_attributes = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setUserAttributesAttributes:arg_attributes error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.channeltalk.BridgeLeanplumNativeMethod.track"
        binaryMessenger:binaryMessenger
        codec:BridgeLeanplumNativeMethodGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(trackEventName:params:error:)], @"BridgeLeanplumNativeMethod api (%@) doesn't respond to @selector(trackEventName:params:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_eventName = GetNullableObjectAtIndex(args, 0);
        NSDictionary<NSString *, id> *arg_params = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api trackEventName:arg_eventName params:arg_params error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
NSObject<FlutterMessageCodec> *BridgeLeanplumMsgCallbacksGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  sSharedObject = [FlutterStandardMessageCodec sharedInstance];
  return sSharedObject;
}

@interface BridgeLeanplumMsgCallbacks ()
@property(nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation BridgeLeanplumMsgCallbacks

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}
@end


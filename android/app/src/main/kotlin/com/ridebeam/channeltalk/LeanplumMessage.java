// Autogenerated from Pigeon (v10.1.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.ridebeam/channeltalk;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class LeanplumMessage {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  /**
   * This is is only for generating pigeon code, never import this file.
   *
   * Generated class from Pigeon that represents data sent in messages.
   */
  public static final class BridgeLeanplumUserAttributes {
    private @Nullable String email;

    public @Nullable String getEmail() {
      return email;
    }

    public void setEmail(@Nullable String setterArg) {
      this.email = setterArg;
    }

    private @Nullable String userId;

    public @Nullable String getUserId() {
      return userId;
    }

    public void setUserId(@Nullable String setterArg) {
      this.userId = setterArg;
    }

    public static final class Builder {

      private @Nullable String email;

      public @NonNull Builder setEmail(@Nullable String setterArg) {
        this.email = setterArg;
        return this;
      }

      private @Nullable String userId;

      public @NonNull Builder setUserId(@Nullable String setterArg) {
        this.userId = setterArg;
        return this;
      }

      public @NonNull BridgeLeanplumUserAttributes build() {
        BridgeLeanplumUserAttributes pigeonReturn = new BridgeLeanplumUserAttributes();
        pigeonReturn.setEmail(email);
        pigeonReturn.setUserId(userId);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(email);
      toListResult.add(userId);
      return toListResult;
    }

    static @NonNull BridgeLeanplumUserAttributes fromList(@NonNull ArrayList<Object> list) {
      BridgeLeanplumUserAttributes pigeonResult = new BridgeLeanplumUserAttributes();
      Object email = list.get(0);
      pigeonResult.setEmail((String) email);
      Object userId = list.get(1);
      pigeonResult.setUserId((String) userId);
      return pigeonResult;
    }
  }

  private static class BridgeLeanplumNativeMethodCodec extends StandardMessageCodec {
    public static final BridgeLeanplumNativeMethodCodec INSTANCE = new BridgeLeanplumNativeMethodCodec();

    private BridgeLeanplumNativeMethodCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return BridgeLeanplumUserAttributes.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof BridgeLeanplumUserAttributes) {
        stream.write(128);
        writeValue(stream, ((BridgeLeanplumUserAttributes) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface BridgeLeanplumNativeMethod {

    void init(@NonNull String appId, @NonNull String appKey);

    void setUserAttributes(@NonNull BridgeLeanplumUserAttributes attributes);

    void track(@NonNull String eventName, @Nullable Map<String, Object> params);

    /** The codec used by BridgeLeanplumNativeMethod. */
    static @NonNull MessageCodec<Object> getCodec() {
      return BridgeLeanplumNativeMethodCodec.INSTANCE;
    }
    /**Sets up an instance of `BridgeLeanplumNativeMethod` to handle messages through the `binaryMessenger`. */
    static void setup(@NonNull BinaryMessenger binaryMessenger, @Nullable BridgeLeanplumNativeMethod api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.channeltalk.BridgeLeanplumNativeMethod.init", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String appIdArg = (String) args.get(0);
                String appKeyArg = (String) args.get(1);
                try {
                  api.init(appIdArg, appKeyArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.channeltalk.BridgeLeanplumNativeMethod.setUserAttributes", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                BridgeLeanplumUserAttributes attributesArg = (BridgeLeanplumUserAttributes) args.get(0);
                try {
                  api.setUserAttributes(attributesArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.channeltalk.BridgeLeanplumNativeMethod.track", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String eventNameArg = (String) args.get(0);
                Map<String, Object> paramsArg = (Map<String, Object>) args.get(1);
                try {
                  api.track(eventNameArg, paramsArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  /** Generated class from Pigeon that represents Flutter messages that can be called from Java. */
  public static class BridgeLeanplumMsgCallbacks {
    private final @NonNull BinaryMessenger binaryMessenger;

    public BridgeLeanplumMsgCallbacks(@NonNull BinaryMessenger argBinaryMessenger) {
      this.binaryMessenger = argBinaryMessenger;
    }

    /** Public interface for sending reply. */ 
    @SuppressWarnings("UnknownNullness")
    public interface Reply<T> {
      void reply(T reply);
    }
    /** The codec used by BridgeLeanplumMsgCallbacks. */
    static @NonNull MessageCodec<Object> getCodec() {
      return new StandardMessageCodec();
    }
  }
}
